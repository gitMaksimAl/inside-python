lines = [
    "import csv",
    "from csv import writer",
    "import json",
    "from functools import wraps",
    "from pathlib import Path",
    "from random import randint",
    "",
    "__LEAST_NUMBER_OF_ARGUMENTS = 100",
    "__GREATEST_NUMBER_OF_ARGUMENTS = 1000",
    "__IN_FILE = 'input_data.csv'",
    "__OUT_FILE = 'results.json'",
    "",
    "",
    "def generator_limit(func):",

    "    def wrapper(*args):",
    "        file_name, rows = args",
    "        if rows < __LEAST_NUMBER_OF_ARGUMENTS:",
    "            rows = __LEAST_NUMBER_OF_ARGUMENTS",
    "        elif rows > __GREATEST_NUMBER_OF_ARGUMENTS:",
    "            rows = __GREATEST_NUMBER_OF_ARGUMENTS",
    "",
    "        func(file_name, rows)",
    "",
    "    return wrapper",
    "",
    "",
    "def generate_csv_file(file_name, rows):",
    "    args_list = []",
    "    for _ in range(rows):",
    "        args_list.append((randint(-20, 20),",
    "                          randint(1, 77),",
    "                          randint(-3, 33)))",
    "    file_name = Path(file_name)",
    "    headers = ['a', 'b', 'c']",
    "    with file_name.open('w', encoding='utf-8', newline='') as f:",
    "        csv_writer = writer(f,",
    "                            dialect='excel-tab',",
    "                            quoting=csv.QUOTE_NONNUMERIC)",
    "        csv_writer.writerow(headers)",
    "        csv_writer.writerows(args_list)",
    "",
    "",
    "def save_to_json(func):",
    "",
    "    @wraps(func)",
    "    def wrapp(file) -> None:",
    "        in_data = []",
    "        with open(file, 'r', encoding='utf-8', newline='') as i:",
    "            reader = csv.DictReader(i, fieldnames=['a', 'b', 'c'],",
    "                                    dialect='excel-tab',",
    "                                    quoting=csv.QUOTE_NONNUMERIC)",
    "            for num_set in reader:",
    "                in_data.append(num_set)",
    "        in_data.remove(in_data[0])",
    "        for equation in in_data:",
    "            equation['result'] = func(**equation)",
    "        with open(__OUT_FILE, 'w', encoding='utf-8', newline='') as o:",
    "            json.dump(in_data, o, indent=2)",
    "",
    "    return wrapp",
    "",
    "",
    "@save_to_json",
    "def find_roots(a, b, c):",
    "    x = y = None",
    "    discriminant = b ** 2 - 4 * a * c",
    "    if discriminant > 0:",
    "        try:",
    "            x = (-b + discriminant ** 0.5) / (2 * a)",
    "            y = (-b - discriminant ** 0.5) / (2 * a)",
    "            return x, y",
    "        except ZeroDivisionError:",
    "            pass",
    "    elif discriminant == 0:",
    "        try:",
    "            return -b / (2 * a)",
    "        except ZeroDivisionError:",
    "            pass",
    "    return None",
]

with open('__init__.py', 'w', encoding='utf-8') as init_file:
    for line in lines:
        init_file.writelines(line + '\n')
    init_file.writelines("\n")