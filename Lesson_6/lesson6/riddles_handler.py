# Создайте модуль с функцией внутри.
# Функция получает на вход загадку, список с возможными вариантами отгадок и
# количество попыток на угадывание. Программа возвращает номер попытки, с
# которой была отгадана загадка или ноль, если попытки исчерпаны.
from typing import Callable

__all__ = ['guess_riddle', 'save_statistic']
_data = {}


def guess_riddle(riddle: str, variation: list[str], attempt: int = 3) -> int:
    print(f"{riddle}\nWhat is it? ")
    for i in range(1, attempt + 1):
        ans = input(f'Attempt {i}: ').lower()
        if ans in variation:
            return i
    return 0


# Добавьте в модуль с загадками функцию, которая хранит словарь списков.
# Ключ словаря - загадка, значение - список с отгадками.
# Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои
# загадки

def ask_riddles(teller: Callable[[str, list[str], int], int]) -> None:
    riddles = {'В воду идёт красный, А из воды - чёрный.': ['уголь', 'уголек'],
               'Скажешь — не приходи! ' \
               'Всё равно приходит. ' \
               'Скажешь — не уходи! ' \
               'Всё равно уходит.': ['время', ''],
               'Где есть реки, но нет воды, ' \
               'есть города, но нет зданий, ' \
               'и есть леса, но нет деревьев?': ['карта', ''],
               'Что становится больше, ' \
               'если его перевернуть вверх ногами?':
                   ['шесть', '6', 'цифра шесть', 'цифра 6'],
               'Сидит девушка, а вы не можете сесть на ее место, ' \
               'даже если она встанет и уйдет. ' \
               'Где она сидит?': ['на коленях', 'на корточках']}
    for riddle in riddles:
        attempt = teller(riddle, riddles[riddle], 3)
        save_statistic(riddle, attempt)
        print(f"{'Угадал' if attempt > 0 else 'Не Угадал'} {attempt} попыток.")


# Добавьте в модуль с загадками функцию, которая принимает на вход строку
# (текст загадки) и число (номер попытки, с которой она угадана).
# Функция формирует словарь с информацией о результатах отгадывания.
# Для хранения используйте защищённый словарь уровня модуля.
# Отдельно напишите функцию, которая выводит результаты угадывания из
# защищённого словаря в удобном для чтения виде.
# Для формирования результатов используйте генераторное выражение


def save_statistic(riddle: str, amount: int) -> None:
    global _data
    _data[riddle] = amount


def push_statistic() -> None:
    global _data
    statistic = (f"Загадку: {key} угадали с {value} попытки" if value > 0
                 else f"Загадку: {key} не угадали."
                 for key, value in _data.items())
    print(*statistic, sep='\n')


if __name__ == '__main__':
    ask_riddles(guess_riddle)
    push_statistic()
